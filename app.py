import streamlit as st# 味方＼相手バイ状況の基礎勝率（%）base_win_rate = {    "エコ": {"エコ": 50.0, "調整バイ": 13.8, "バイ": 11.2},    "調整バイ": {"エコ": 86.2, "調整バイ": 50.0, "バイ": 38.0},    "バイ": {"エコ": 88.8, "調整バイ": 62.0, "バイ": 50.0}}# ラウンド取得方法ごとの調子の上り幅round_momentum = {    "thrifty": 1.86,    "team ace": 2.01,    "ace": 2.50,    "perfect": 2.64,    "clutch": 0.95,    "round win": 1.42,    "round lose": -1.71}def predict_winrate(ally_buy, enemy_buy, last_3_rounds):    # 基本勝率をバイ状況から取得    winrate = base_win_rate[ally_buy][enemy_buy]    # 直前3ラウンドの補正値を加算    for r in last_3_rounds:        if r in round_momentum:            winrate += round_momentum[r]    # 0〜100の範囲に収める    winrate = min(max(winrate, 0), 100)    return round(winrate, 1)# --- Streamlit UI ---st.title("Valorant 勝率予測アプリ")# バイ状況入力st.subheader("バイ状況を選んでください")ally_buy = st.selectbox("味方のバイ状況", ["エコ", "調整バイ", "バイ"])enemy_buy = st.selectbox("相手のバイ状況", ["エコ", "調整バイ", "バイ"])# 直前3ラウンドの入力round_types = list(round_momentum.keys())st.subheader("直前3ラウンドの取得方法")last_3_rounds = [    st.selectbox("1ラウンド前", round_types, key="r1"),    st.selectbox("2ラウンド前", round_types, key="r2"),    st.selectbox("3ラウンド前", round_types, key="r3")]# 勝率予測if st.button("勝率を予測する"):    result = predict_winrate(ally_buy, enemy_buy, last_3_rounds)    st.success(f"次ラウンド勝率の予測: {result}%")